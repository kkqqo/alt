{% verbatim %}
<div id="_div1">

	<alt-box class="box-primary">
		<alt-box-header>
			Composer
			<button class="btn btn-xs btn-primary" @click="run('update hostlink/r-alt')">update hostlink/r-alt</button>
			<button class="btn btn-xs btn-primary" @click="changeOwner">Change owner</button>
			<button class="btn btn-xs btn-primary" @click="addRaymondRepo">Add Raymond repo</button>
		</alt-box-header>
		<alt-box-body>
			<input type="text" v-model="cmd" placeholder="update hostlink/r-alt" @keyup.enter="runComposer" class="form-control">
			<div v-html="composer_output" style="white-space:pre;overflow:auto">

			</div>
		</alt-box-body>
	</alt-box>

	<alt-box class="box-primary" ref="packageBox1">
		<alt-box-header>
			Install packages
		</alt-box-header>
		<alt-box-body>
			<div class="col-md-9">
				<table class="table table-condensed table-hover">
					<tr>
						<th>Name</th>
						<th>Description</th>
						<th>Version</th>
					</tr>
					<tr v-for="p in installedPackages" v-if="p.version">
						<td v-text="p.name"></td>
						<td v-text="p.description"></td>
						<td v-text="p.version"></td>
					</tr>
				</table>
			</div>

			<div class="col-md-3">
				<table class="table table-condensed table-hover">
					<tr>
						<th>Name</th>
						<th></th>
					</tr>
					<tr v-for="p in installedPackages" v-if="!p.version">
						<td v-text="p.name"></td>
						<td>
							<button v-if="!p.version" class="btn btn-xs btn-success" @click="requirePackage(p.name)">
								<i class="fa fa-download"></i>
							</button>
						</td>
					</tr>
				</table>

			</div>

		</alt-box-body>
	</alt-box>
</div>

<script>

	var vm = new Vue({
		el: "#_div1",
		data: {
			cmd: "",
			composer_output: "",
			installedPackages: []
		},
		mounted() {
			this.reloadPackages();
		}, methods: {
			addRaymondRepo() {
				this.composer_output = "loading...";
				this.$http.post("System/composer/addRaymondRepo").then(resp => {
					this.composer_output = "";
				});
			},
			changeOwner() {
				this.composer_output = "loading...";
				this.$http.post("System/composer/changeOwner").then(resp => {
					this.composer_output = "";
				});
			},
			reloadPackages() {
				this.$refs.packageBox1.showLoading();
				this.$http.get("System/composer/installedPackages").then(resp => {
					this.installedPackages = resp.body;
					this.$refs.packageBox1.hideLoading();
				});
			},
			requirePackage(package) {
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: "require " + package
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
					this.reloadPackages();
				});
			},
			run(cmd) {
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: cmd
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
				});
			},
			runComposer() {
				this.cmd = "";
				this.composer_output = "loading...";
				this.$http.post("System/composer/run", {
					cmd: this.cmd
				}).then(resp => {
					this.cmd = "";
					this.composer_output = resp.body.output;
				});
			}
		}
	});
</script> {% endverbatim %}